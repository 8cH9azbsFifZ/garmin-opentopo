#!/bin/bash

MKGMAP="mkgmap-r4193" # adjust to latest version (see www.mkgmap.org.uk)
SPLITTER="splitter-r591"

MKGMAPJAR="$(pwd)/bin/tools/${MKGMAP}/mkgmap.jar"
SPLITTERJAR="$(pwd)/bin/tools/${SPLITTER}/splitter.jar"
GMAPIBUILDER="$(pwd)/bin/tools/gmapi-builder/gmapi-builder.py"
BOUNDS="$(pwd)/var/bounds"
SEA="$(pwd)/var/sea"
OPTIONS="$(pwd)/style/opentopomap_options"

# OSM data
#TODO: only new files
pushd var/download > /dev/null
COUNTRY=europe/germany/hessen-latest
FNAME=$(basename $COUNTRY)
#wget -O $FNAME.osm.pbf.md5 https://download.geofabrik.de/$COUNTRY.osm.pbf.md5
#md5 $FNAME.osm.pbf | grep $(cut -f 1 -d " " $FNAME.osm.pbf.md5 ) || wget -O https://download.geofabrik.de/$COUNTRY.osm.pbf
popd > /dev/null

# Split files
#TODO: if not splitted yet or newer file
#TODO: sort per map
pushd var/data > /dev/null
#java -jar $SPLITTERJAR --precomp-sea=$SEA "../download/hessen-latest.osm.pbf"
DATA="$(pwd)/6324*.pbf"
popd > /dev/null

# Configure style
#TODO: if newer file
# OpenTopoMap
STYLEFILE="$(pwd)/style/opentopomap"
pushd style/typ > /dev/null
java -jar $MKGMAPJAR --family-id=35 OpenTopoMap.txt
TYPFILE="$(pwd)/OpenTopoMap.typ"
popd > /dev/null

# Hiking Map
#TODO: if newer file
#STYLEFILE="$(pwd)/style/hiking"
#pushd style/hiking > /dev/null
#java -jar $MKGMAPJAR --family-id=35 hiking_typdef.txt
#TYPFILE="$(pwd)/hiking_typdef.typ"
#popd > /dev/null

# TODO: Include contour in one map file: http://www.mkgmap.org.uk/pipermail/mkgmap-dev/2018q1/028154.html

# Create map
mm="-Xmx1536M"
OUTDIR=var/output
#java $mm -jar $MKGMAPJAR -c $OPTIONS --style-file=$STYLEFILE \
#    --precomp-sea=$SEA \
#    --output-dir=$OUTDIR --bounds=$BOUNDS $DATA $TYPFILE

pushd var/output >/dev/null
echo $PWD
$GMAPIBUILDER -t osmmap.tdb -b gmapsupp.img -s $TYPFILE *.img
popd > /dev/null

#TODO:  optional: give map a useful name:
#mv output/gmapsupp.img maps/$FNAME.img

#adb push output/gmapsupp.img /mnt/sdcard/oruxmaps/mapfiles

_prepare_files ()
{
# FIXME: make this good again :)
# Boundary strucutres
if [ ! -e "bounds/germany.poly" ]; then
  echo "downloading bounds"
  zipfile="download/bounds.zip"
  test -e $zipfile || wget -O $zipfile "http://osm2.pleiades.uni-wuppertal.de/bounds/latest/bounds.zip"
  unzip $zipfile -d bounds
fi

# Sea structures
if [ ! -e "sea/version.txt" ]; then
  echo "downloading sea"
  zipfile="download/sea.zip"
  test -e $zipfile || wget -O $zipfile "http://osm2.pleiades.uni-wuppertal.de/sea/latest/sea.zip"
  unzip $zipfile -d sea
fi
}
